name: .NET Web Api

on:
  push:
    branches: [ main ]
    paths:
    - '.github/workflows/api.yml'
    - 'PersonHubApi/**'
    - '!PersonHubApi/azure-pipelines.yml'

  pull_request:
    branches: [ main ]
    paths:
    - '.github/workflows/api.yml'
    - 'PersonHubApi/**'
    - '!PersonHubApi/azure-pipelines.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: person-hub-api
      POSTGRES_HOST: ${{ secrets.PERSON_HUB_DB_HOST }}
      POSTGRES_PORT: 5432
      POSTGRES_DB: person-hub
      POSTGRES_SCHEMA: person-hub
      POSTGRES_USER: ${{ secrets.PERSON_HUB_DB_USER }}
      POSTGRES_PASSWORD: ${{ secrets.PERSON_HUB_DB_PASSWORD }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      AUTHENTICATION_TYPE: Auth0

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Clean up dependencies (docker-compose)
      run: docker-compose -f "PersonHubApi/docker-compose.test.yaml" down --volumes

    - name: Start dependencies (docker-compose)
      run: docker-compose -f "PersonHubApi/docker-compose.test.yaml" up -d

    - name: Wait for SQL Server container
      uses: jakejarvis/wait-action@master
      with:
        time: '5s'

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore PersonHubApi/PersonHubApi.sln

    - name: Build
      run: dotnet build -c Release PersonHubApi/PersonHubApi.sln --no-restore

    - name: Run Unit Test
      run: dotnet test -c Release PersonHubApi/tests/PersonHub.UnitTest/PersonHub.UnitTest.csproj --no-build --verbosity normal --logger:"console;verbosity=detailed"

    - name: Run Integration Test
      run: dotnet test -c Release PersonHubApi/tests/PersonHub.IntegrationTest/PersonHub.IntegrationTest.csproj --no-build --verbosity normal --logger:"console;verbosity=detailed"

    - run: echo "Git Hub ref" + github.ref
    - run: echo "Git Hub Event Name" + github.event_name
    - run: echo "Git Hub Event Action" + github.event.action
    - run: echo "Git Hub Event pull_request merged" + github.event.pull_request.merged

    - name: variable substitution in json, xml, and yml files
      if: github.ref == 'refs/heads/master' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
      uses: microsoft/variable-substitution@v1
      with:
        files: 'PersonHubApi/src/PersonHub.Api/appsettings.json'
      env:
        Authentication.ActiveImplementation: ${{ env.AUTHENTICATION_TYPE }}
        ApplicationSetting.AppName: ${{ env.APP_NAME }}
        DatabaseConnectionConfig.Host: ${{ env.POSTGRES_HOST }}
        DatabaseConnectionConfig.UserName: ${{ env.POSTGRES_USER }}
        DatabaseConnectionConfig.Password: ${{ env.POSTGRES_PASSWORD }}

    - name: Run Flyway Migration
      if: github.ref == 'refs/heads/master' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
      run: >-
        docker run --rm
        --volume ${{ github.workspace }}/PersonHubApi/sql:/flyway/sql
        flyway/flyway:7.12.1-alpine
        -url="jdbc:postgresql://${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}?sslmode=require"
        -schemas=${{ env.POSTGRES_SCHEMA }}
        -user="${{ env.POSTGRES_USER }}"
        -password="${{ env.POSTGRES_PASSWORD }}"
        migrate



    - name: Build, publish docker image, and deploy to heroku
      if: github.ref == 'refs/heads/master' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
      uses: gonuit/heroku-docker-deploy@v1.3.3
      with:
        email: ${{ env.HEROKU_EMAIL }}

        heroku_api_key: ${{ env.HEROKU_API_KEY }}

        heroku_app_name: ${{ env.APP_NAME }}

        dockerfile_directory: ./PersonHubApi

        dockerfile_name: Dockerfile.heroku

        docker_options: "--no-cache"

        # (Optional, default: "web")
        # Select the process type for which you want the docker container to be uploaded.
        # By default, this argument is set to "web".
        # For more information look at https://devcenter.heroku.com/articles/process-model
        process_type: web
